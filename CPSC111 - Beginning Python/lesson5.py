#debugging and function practice

'''
Call stack
    functions can call other Functions
    as functions are called, python keeps track of the order of function calls with the call stack

Program crashes
    if an error occurs in your proram, python prints a traceback message to the console, which contains information about the state of the call stack when the program crashes

Debugging your progam
    bug: an error in your program
    debugging: the process of removing bugs from your program

    how to debug:
        1. use debugger
        2. insert print statements
        3. google
'''



'''
Problem #1 Tax
Write a program to compute the total price for a purchase after sales tax. Prompt the user to enter the purchase amount and the sales tax percent. Display the total price (to the nearest 2 decimal places) after adding the sales tax to the purchase amount.

Use functions where appropriate!

    Example output:
        Please enter the purchase price: 9.00
        Please enter the sales tax as a percent (%): 7.8
        Total purchase price after tax: $9.70
'''
def get_purchase_price():
    '''

    '''

    user_price = float(input("Please enter the purchase price: "))
    return user_price

def get_sales_tax():
    '''

    '''
    user_tax_percent = float(input("Please enter the sales tax as a percent: "))
    return user_tax_percent

def compute_total_price(price_param, tax_percent_param):
    '''

    '''
    price_param += price_param * (tax_percent_param / 100)
    return price_param

def display_total_price(total_param):
    '''

    '''
    print("Total purchase price after tax: $%.2f" %(total_param))

def main():
    '''

    '''
    purchase_price = get_purchase_price()
    tax_percent = get_sales_tax()
    total = compute_total_price(purchase_price, tax_percent)
    display_total_price(total)
main()


'''
Problem #2 Mileage Reimbursement
Write a program that calculates mileage reimbursement for a salesperson at the rate of \$.35 per mile.

Use functions where appropriate!

    Example output:
        MILEAGE REIMBURSEMENT CALCULATOR
        Please enter the beginning odometer reading: 13505.2
        Please enter the ending odometer reading: 13810.6
        You traveled 305.4 miles. At $0.35 per mile, your reimbursement is $106.89
'''
def get_reading(label):
    '''

    '''
    odo = float(input("Please enter the %s odometer reading: " %(label)))
    return odo

def compute_difference(reading1, reading2):
    '''

    '''
    diff = reading2 - reading1
    return diff

def compute_reimbursement(diff):
    '''

    '''
    reimb = diff * 0.35
    return reimb

def display_reimbursement(diff, r):
    '''

    '''
    print("You traveled %.1f miles. At $0.35 per mile, your reimbursement is $%.2f" %(diff, r))

def main():
    '''

    '''
    r1 = get_reading("beginning")
    r2 = get_reading("ending")
    diff = compute_difference(r1, r2)
    reimb = compute_reimbursement(diff)
    display_reimbursement(diff, reimb)

main()


'''
The Pythagorean theorem states that the sum of the squares of the sides of a right triangle is equal to the square of the hypotenuse.

$$side1^{2} + side2^{2} = hypotenuse^{2}$$
For example, if two sides of a right triangle have lengths 3 and 4, then the hypotenuse must have a length of 5. Together the integers 3, 4, and 5 form a Pythagorean triple. There are an infinite number of such triples. Given two positive integers m and n, where m> n, a Pythagorean triple can be generated by the following formulas:

side1 = $m^2 â€“ n^2$
side2 = $2mn$
hypotenuse = $m^2 + n^2$
Write a program that takes the values for m and n as input and displays the values of the Pythagorean triple generated by the formulas above.

Use functions where appropriate!

    Example output:
        Please enter an m value: 4
        Please enter an n value: 2
        Pythagorean triple: 12^2 + 16^2 = 20^2
'''
def get_value(m_or_n):
    '''

    '''
    val = int(input("Please enter an %s value: " %(m_or_n)))
    return val

def compute_side1(m, n):
    '''

    '''
    side1 = m ** 2 - n ** 2
    return side1

def compute_side2(m, n):
    '''

    '''
    side2 = 2 * m * n
    return side2

def compute_hypotenuse(m, n):
    '''

    '''
    hypo = m ** 2 + n ** 2
    return hypo

def display_triple(s1, s2, hypo):
    '''

    '''
    print("Pythagorean triple: %d^2 + %d^2 = %d^2" %(s1, s2, hypo))

def main():
    '''

    '''
    m = get_value("m")
    n = get_value("n")
    s1 = compute_side1(m, n)
    s2 = compute_side2(m, n)
    hypotenuse = compute_hypotenuse(m, n)
    display_triple(s1, s2, hypotenuse)
main()


'''
MA7 Practice Problems
    1. What about the design and implementation of functions is the most clear to you?
    2. What about the design and implementation of functions is the least clear to you?
    3. Of the topics that we have covered so far in CptS 111, which topics (if any) are you unclear about? Please be specific.
    4. Practice exam problem: Define and call a function that accepts 3 numeric parameters. The function computes and returns the average of the three numeric parameters. Display the returned result. Note: do not prompt for user input. Hard-code numeric arguments to your funct ion.
    5. If the above problem was an exam question, how would you do? Perform a self-assessment.
'''

#if statements

'''
Boolean conditions
    a boolean statement evaluates to either true or false
        false: 0
        true: 1

relational operators
    < - less than
    > - greater than
    <= - less than or equal to
    >= - greater than or equal to
    == - equal to
    != - not equal to

logical operators
    we can combine relational operators with logical operators to consstruct general boolean expressions in python:
        and
        not
        or

    truth table:
         __________________________________
        | P | Q | not P | P and Q | P or Q |
        | 0 | 0 |   1   |    0    |   0    |
        | 0 | 1 |   1   |    0    |   1    |
        | 1 | 0 |   0   |    0    |   1    |
        | 1 | 1 |   0   |    1    |   1    |
         ----------------------------------

operator precedence
      _______________________________________
     | Operator                | Precedence |
     | () (parentheses)        | (highest)  |
     | function calls          |            |
     | **                      |            |
     | +, - (urnary operators) |            |
     | *, /, //, %             |            |
     | +, -                    |            |
     | <, <=, >=, >, ==, !=    |            |
     | not                     |            |
     | and                     |            |
     | or                      |            |
     | = (assignment)          | (lowest)   |


logical assignment
    if statements
        1. sequence: the ability to execute a series of instructions, one after the other
        2. conditional: the ability to execute an instruction contingent upon some condition
        3. iteration: the ability to execute one or more instructions repeatedly

    if statements are conditionals: the ability to execute some code If some condition is true

predicate functions
    functions that return booleans

common mistakes with if statements
    using = instead of ==
    using if-else when if-if should be used
    using logical and instead of logical or 
'''
